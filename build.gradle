apply plugin: 'java'
apply plugin: 'eclipse'

apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'

// Configuraci√≥n

sourceCompatibility = 1.7
version = '0.1'
test.ignoreFailures = true

defaultTasks 'clean', 'compileJava', 'fatJar', 'test', 'checkstyleMain', 'pmd', 'findbugsMain', 'jacocoTestReport', 'wrapper'
sourceSets {
    main {
        java {
            srcDirs 'src/main/resources'
            srcDirs 'src/main/java'
        }
        resources {
            srcDirs 'recursos'
            
        }
    }
 }
repositories {
	mavenCentral()
}

configurations {
	pmdConf
}

dependencies {
	compile files('gson-2.8.0.jar','Recursos.jar','Dominio.jar')
    compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    
    testCompile group: 'junit', name: 'junit', version: '4.+'
    pmdConf group: 'pmd', name: 'pmd', version: '4.3'
}

/*buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.saliman', name: 'gradle-cobertura-plugin', version: '1.1.0'
	}
}*/

// Tareas

checkstyle {
	configFile = new File(rootDir, "src/test/resources/sun_checks.xml")
	ignoreFailures = true
}

/*checkstyleMain {
    enabled = true
}

build.finalizedBy(checkstyleMain)

tasks.withType(Checkstyle) {
  reports {
    html.destination rootProject.file("build/reports/checkstyle.html")
  }
}*/

/*cobertura {
    coverageFormats = ['html', 'xml']
}*/


task pmd (dependsOn: compileJava) << {
    println 'Running PMD/CPD static code analysis'
    ant {
        if (!buildDir.isDirectory()) {
            buildDir.mkdirs()
        }
        reportFolder = new File(rootDir, "build/reports/pmd-cpd")
        if (!reportFolder.isDirectory()) {
        	reportFolder.mkdirs()
        }
        taskdef(name: 'pmd', classname: 'net.sourceforge.pmd.ant.PMDTask', classpath: configurations.pmdConf.asPath)
        taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask', classpath: configurations.pmdConf.asPath)

        pmd(shortFilenames: 'true',
            failonruleviolation: 'false',
            rulesetfiles: 'rulesets/basic.xml, rulesets/braces.xml, rulesets/clone.xml, rulesets/coupling.xml, rulesets/codesize.xml, rulesets/design.xml, rulesets/migrating.xml, rulesets/naming.xml, rulesets/strictexception.xml, rulesets/strings.xml, rulesets/unusedcode.xml') {
                formatter(type: 'xml', toFile: 'build/reports/pmd-cpd/pmd.xml')
                fileset(dir: "src/main/java") {
                    include(name: '**/*.java')
                }
        }
        cpd(minimumTokenCount: 10, format: 'xml',
        	ignoreLiterals: 'true',
        	ignoreIdentifiers: 'true',
        	outputFile: 'build/reports/pmd-cpd/cpd.xml') {
            fileSet(dir: "src/main/java") {
                include(name: '**/*.java')
            }
        }
    }
}

findbugs {
    ignoreFailures = true
}

task fatJar(type: Jar) {
	manifest { 
    	attributes "Main-Class": "frames.MenuInicio"
  	}

    baseName = project.name
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    from('src/main/java/frames') {
    	include '*.png'
    	include '*.jpg'
    	into 'frames'
  	}
  	from(rootDir) {
  		
  		include 'config.txt'
  	}
 	
    with jar
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled true
        html.enabled true
        //html.destination "${buildDir}/jacocoHtml"
    }
    
task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}
}